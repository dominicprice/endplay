import ctypes
import sys
from collections.abc import Iterable

__all__ = [
    "deal",
    "dealPBN",
    "ddTableDeal",
    "ddTableDealPBN",
    "ddTableDeals",
    "ddTableDealsPBN",
    "boards",
    "boardsPBN",
    "futureTricks",
    "solvedBoards",
    "ddTableResults",
    "ddTablesRes",
    "parResults",
    "allParResults",
    "parResultsDealer",
    "contractType",
    "parResultsMaster",
    "parTextResults",
    "DDSInfo",
    "playTraceBin",
    "playTracePBN",
    "playTracesBin",
    "playTracesPBN",
    "solvedPlay",
    "solvedPlays",
    "SetMaxThreads",
    "FreeMemory",
    "ErrorMessage",
    "DDSError",
    "SolveBoard",
    "SolveBoardPBN",
    "CalcDDtable",
    "CalcDDtablePBN",
    "CalcAllTables",
    "CalcAllTablesPBN",
    "SolveAllBoards",
    "SolveAllBoardsBin",
    "SolveAllChunksBin",
    "SolveAllChunks",
    "SolveAllChunksPBN",
    "Par",
    "DealerPar",
    "DealerParBin",
    "ConvertToDealerTextFormat",
    "SidesPar",
    "SidesParBin",
    "ConvertToSidesTextFormat",
    "CalcPar",
    "CalcParPBN",
    "AnalysePlayBin",
    "AnalysePlayPBN",
    "AnalyseAllPlaysBin",
    "AnalyseAllPlaysPBN",
]

if sys.platform == "win32":
    _dll: ctypes.WinDLL
    _libc: ctypes.WinDLL
else:
    _dll: ctypes.CDLL
    _libc: ctypes.CDLL

MAXNOOFBOARDS: int
MAXNOOFTABLES: int

class deal(ctypes.Structure): ...
class dealPBN(ctypes.Structure): ...
class ddTableDeal(ctypes.Structure): ...
class ddTableDealPBN(ctypes.Structure): ...
class ddTableDeals(ctypes.Structure): ...
class ddTableDealsPBN(ctypes.Structure): ...
class boards(ctypes.Structure): ...
class boardsPBN(ctypes.Structure): ...
class futureTricks(ctypes.Structure): ...
class solvedBoards(ctypes.Structure): ...
class ddTableResults(ctypes.Structure): ...
class ddTablesRes(ctypes.Structure): ...
class parResults(ctypes.Structure): ...
class allParResults(ctypes.Structure): ...
class parResultsDealer(ctypes.Structure): ...
class contractType(ctypes.Structure): ...
class parResultsMaster(ctypes.Structure): ...
class parTextResults(ctypes.Structure): ...
class DDSInfo(ctypes.Structure): ...
class playTraceBin(ctypes.Structure): ...
class playTracePBN(ctypes.Structure): ...
class playTracesBin(ctypes.Structure): ...
class playTracesPBN(ctypes.Structure): ...
class solvedPlay(ctypes.Structure): ...
class solvedPlays(ctypes.Structure): ...

def SetMaxThreads(userThreads: int): ...
def FreeMemory(): ...
def ErrorMessage(code: int, line: str): ...

class DDSError(RuntimeError):
    @staticmethod
    def from_code(code): ...

def SolveBoard(
    dl: deal,
    target: int,
    solutions: int,
    mode: int,
    futp: futureTricks,
    threadIndex: int,
): ...
def SolveBoardPBN(
    dlPBN: dealPBN,
    target: int,
    solutions: int,
    mode: int,
    futp: futureTricks,
    threadIndex: int,
): ...
def CalcDDtable(tableDeal: ddTableDeal, tablep: ddTableResults): ...
def CalcDDtablePBN(tableDealPBN: ddTableDealPBN, tablep: ddTableResults): ...
def CalcAllTables(
    dealsp: ddTableDeals,
    mode: int,
    trumpFilter: Iterable[int],
    resp: ddTablesRes,
    presp: allParResults,
): ...
def CalcAllTablesPBN(
    dealsp: ddTableDealsPBN,
    mode: int,
    trumpFilter: Iterable[int],
    resp: ddTablesRes,
    presp: allParResults,
): ...
def SolveAllBoards(bop: boardsPBN, solvedp: solvedBoards): ...
def SolveAllBoardsBin(bop: boards, solvedp: solvedBoards): ...
def SolveAllChunksBin(bop: boards, solvedp: solvedBoards, chunkSize: int): ...
def SolveAllChunks(bop: boards, solvedp: solvedBoards, chunkSize: int): ...
def SolveAllChunksPBN(bop: boardsPBN, solvedp: solvedBoards, chunkSize: int): ...
def Par(tablep: ddTableResults, presp: parResults, vulnerable: int): ...
def DealerPar(
    tablep: ddTableResults, presp: parResultsMaster, dealer: int, vulnerable: int
): ...
def DealerParBin(
    tablep: ddTableResults, presp: parResultsMaster, dealer: int, vulnerable: int
): ...
def ConvertToDealerTextFormat(pres: parResultsMaster, resp: ctypes.c_char_p): ...
def SidesPar(tablep: ddTableResults, presp: parResultsDealer, vulnerable: int): ...
def SidesParBin(
    tablep: ddTableResults, sidesRes: ctypes.Array[parResultsMaster], vulnerable: int
): ...
def ConvertToSidesTextFormat(pres: parResultsMaster, resp: parTextResults): ...
def CalcPar(
    tableDeal: ddTableDeal, vulnerable: int, tablep: ddTableResults, presp: parResults
): ...
def CalcParPBN(
    tableDealPBN: ddTableDealPBN,
    tablep: ddTableResults,
    vulnerable: int,
    presp: parResults,
): ...
def AnalysePlayBin(dl: deal, play: playTraceBin, solvedp: solvedPlay, thrId: int): ...
def AnalysePlayPBN(
    dlPBN: dealPBN, playPBN: playTracePBN, solvedp: solvedPlay, thrId: int
): ...
def AnalyseAllPlaysBin(
    bop: boards, plp: playTracesBin, solvedp: solvedPlays, chunkSize: int
): ...
def AnalyseAllPlaysPBN(
    bopPBN: boardsPBN, plpPBN: playTracesPBN, solvedp: solvedPlays, chunkSize: int
): ...
